const { expect } = require("chai");
const poolFactoryABI = require("../../artifacts/contracts/periphery/pool/ACOPoolFactory2.sol/ACOPoolFactory2.json");
const factoryABI = require("../../artifacts/contracts/core/ACOFactory.sol/ACOFactory.json");
const { createAcoPoolStrategy } = require("../pool/ACOPoolStrategy.js");
const AddressZero = "0x0000000000000000000000000000000000000000";

describe("ACORewards", function() {
  let ACOFactory;
  let ACOPoolFactory;
  let owner;
  let addr1;
  let addr2;
  let addr3;
  let fee = 30;
  let poolFee = 5000;
  let withdrawOpenPositionPenalty = 10000;
  let underlyingPriceAdjustPercentage = 500;
  let maxOpenAco = 50;
  let maxExercisedAccounts = 120;
  let token1;
  let token1Name = "TOKEN1";
  let token1Symbol = "TOK1";
  let token1Decimals = 8;
  let token1TotalSupply = ethers.BigNumber.from("100000000000000000000000");
  let token2;
  let token2Name = "TOKEN2";
  let token2Symbol = "TOK2";
  let token2Decimals = 6;
  let token2TotalSupply = ethers.BigNumber.from("10000000000000000000000");
  let pairToken1Token2;
  let token1Liq = ethers.BigNumber.from("50000000000");
  let token2Liq = ethers.BigNumber.from("5000000000000");
  let defaultStrategy;
  let aggregatorToken1Token2;
  let flashExercise;
  let uniswapFactory;
  let weth;
  let uniswapRouter;
  let chiToken;
  let converterHelper;
  let toleranceBelowMax = 5000;
  let toleranceAboveMax = 5000;
  let minExpiration = 0;
  let maxExpiration = (30*86400);

  let token1Token2Price = ethers.BigNumber.from("10000000000");
  let expiration1;
  let expiration2;
  let expiration3;
  let acoEthToken2CallPrice = ethers.BigNumber.from("400000000");
  let acoEthToken2CallPrice2 = ethers.BigNumber.from("500000000");
  let acoEthToken2PutPrice = ethers.BigNumber.from("400000000");
  let acoEthToken2PutPrice2 = ethers.BigNumber.from("300000000");
  let acoToken1Token2CallPrice = ethers.BigNumber.from("10000000000");
  let acoToken1Token2CallPrice2 = ethers.BigNumber.from("12000000000");
  let acoToken1Token2PutPrice = ethers.BigNumber.from("10000000000");
  let acoToken1Token2PutPrice2 = ethers.BigNumber.from("9000000000");
  let token1Token2BaseVolatility = 70000;
  let ACOEthToken2Call;
  let ACOEthToken2Call2;
  let ACOEthToken2Put;
  let ACOEthToken2Put2;
  let ACOToken1Token2Call;
  let ACOToken1Token2Call2;
  let ACOToken1Token2Put;
  let ACOToken1Token2Put2;
  let ACOPoolToken1Token2Call;
  let ACOPoolToken1Token2Put;
  let atoken;
  let acoRewards;
  let acoCallTotal = ethers.BigNumber.from("10000000000000000000");
  let acoPutTotal = ethers.BigNumber.from("1000000000000");
  let poolCallBal = ethers.BigNumber.from("1000000000");
  let poolPutBal = ethers.BigNumber.from("100000000000");

  beforeEach(async function () {
    [owner, addr1, addr2, addr3, ...addrs] = await ethers.getSigners();

    let ACOFactoryTemp = await (await ethers.getContractFactory("ACOFactoryV4")).deploy();
    await ACOFactoryTemp.deployed();

    let ACOTokenTemp = await (await ethers.getContractFactory("ACOToken")).deploy();
    await ACOTokenTemp.deployed();

    let factoryInterface = new ethers.utils.Interface(factoryABI.abi);
    let factoryInitData = factoryInterface.encodeFunctionData("init", [await owner.getAddress(), ACOTokenTemp.address, fee, await addr3.getAddress()]);
    let buidlerACOFactoryProxy = await (await ethers.getContractFactory("ACOProxy")).deploy(await owner.getAddress(), ACOFactoryTemp.address, factoryInitData);
    await buidlerACOFactoryProxy.deployed();
    ACOFactory = await ethers.getContractAt("ACOFactoryV4", buidlerACOFactoryProxy.address);
    await ACOFactory.setOperator(await owner.getAddress(), true);

    uniswapFactory = await (await ethers.getContractFactory("UniswapV2Factory")).deploy(await owner.getAddress());
    await uniswapFactory.deployed();
    weth = await (await ethers.getContractFactory("WETH9")).deploy();
    await weth.deployed(); 
    uniswapRouter = await (await ethers.getContractFactory("UniswapV2Router02")).deploy(uniswapFactory.address, weth.address);
    await uniswapRouter.deployed();
    flashExercise = await (await ethers.getContractFactory("ACOFlashExercise")).deploy(uniswapRouter.address);
    await flashExercise.deployed();
    chiToken = await (await ethers.getContractFactory("ChiToken")).deploy();
    await chiToken.deployed();
    converterHelper = await (await ethers.getContractFactory("ACOAssetConverterHelper")).deploy(uniswapRouter.address);
    await converterHelper.deployed();
    
    token1 = await (await ethers.getContractFactory("ERC20ForTest")).deploy(token1Name, token1Symbol, token1Decimals, token1TotalSupply);
    await token1.deployed();

    await token1.connect(owner).transfer(await addr1.getAddress(), ethers.BigNumber.from("100000000000000000"));
    await token1.connect(owner).transfer(await addr2.getAddress(), ethers.BigNumber.from("100000000000000000"));
    await token1.connect(owner).transfer(await addr3.getAddress(), ethers.BigNumber.from("100000000000000000"));

    token2 = await (await ethers.getContractFactory("ERC20ForTest")).deploy(token2Name, token2Symbol, token2Decimals, token2TotalSupply);
    await token2.deployed();
    
    await token2.connect(owner).transfer(await addr1.getAddress(), ethers.BigNumber.from("1000000000000000"));
    await token2.connect(owner).transfer(await addr2.getAddress(), ethers.BigNumber.from("1000000000000000"));
    await token2.connect(owner).transfer(await addr3.getAddress(), ethers.BigNumber.from("1000000000000000"));

    aggregatorToken1Token2 = await (await ethers.getContractFactory("AggregatorForTest")).deploy(8, token1Token2Price.mul(100));
    await aggregatorToken1Token2.deployed();

    defaultStrategy = await createAcoPoolStrategy();
    await defaultStrategy.setAssetPrecision(token2.address);

    await converterHelper.setAggregator(token1.address, token2.address, aggregatorToken1Token2.address);
    await converterHelper.setPairTolerancePercentage(token1.address, token2.address, 1250);

    let poolLib = await (await ethers.getContractFactory("ACOPoolLib")).deploy();
    await poolLib.deployed();
    ACOPoolTemp = await (await ethers.getContractFactory("ACOPool2", {libraries:{ACOPoolLib:poolLib.address}})).deploy();
    await ACOPoolTemp.deployed();

    let ACOPoolFactoryTemp = await (await ethers.getContractFactory("ACOPoolFactory2V4")).deploy();
    await ACOPoolFactoryTemp.deployed();
    
    let poolFactoryInterface = new ethers.utils.Interface(poolFactoryABI.abi);
    let poolFactoryInitData = poolFactoryInterface.encodeFunctionData("init", [await owner.getAddress(), ACOPoolTemp.address, buidlerACOFactoryProxy.address, converterHelper.address, chiToken.address, poolFee, await addr3.getAddress(), withdrawOpenPositionPenalty, underlyingPriceAdjustPercentage, maxOpenAco]);
    let buidlerACOPoolFactoryProxy = await (await ethers.getContractFactory("ACOProxy")).deploy(await owner.getAddress(), ACOPoolFactoryTemp.address, poolFactoryInitData);
    await buidlerACOPoolFactoryProxy.deployed();
    ACOPoolFactory = await ethers.getContractAt("ACOPoolFactory2V4", buidlerACOPoolFactoryProxy.address);

    await ACOPoolFactory.setAuthorizedAcoCreator(AddressZero, true);
    await ACOPoolFactory.setOperator(await owner.getAddress(), true);
    await ACOPoolFactory.setPoolProxyAdmin(await owner.getAddress());
    await ACOPoolFactory.setAcoPoolStrategyPermission(defaultStrategy.address, true);

    let lendingPool = await (await ethers.getContractFactory("LendingPoolForTest")).deploy(ethers.BigNumber.from("3000000000000000000000"));
    await lendingPool.deployed();
    await token2.approve(lendingPool.address, token2TotalSupply);
    await lendingPool.setAsset(token2.address, token2TotalSupply.div(4));
    await ACOPoolFactory.setAcoPoolLendingPool(lendingPool.address);
    await lendingPool.deposit(token2.address, token2TotalSupply.div(10), await owner.getAddress(), 0);
    atoken = await ethers.getContractAt("ERC20ForTest", (await lendingPool.getReserveData(token2.address)).aTokenAddress);

    await uniswapFactory.createPair(token1.address, token2.address);
    
    pairToken1Token2 = await ethers.getContractAt("UniswapV2Pair", await uniswapFactory.getPair(token1.address, token2.address));

    await token1.connect(owner).approve(pairToken1Token2.address, token1TotalSupply);
    await token1.connect(addr1).approve(pairToken1Token2.address, token1TotalSupply);
    await token1.connect(addr2).approve(pairToken1Token2.address, token1TotalSupply);
    await token1.connect(addr3).approve(pairToken1Token2.address, token1TotalSupply);
    await token1.connect(owner).approve(uniswapRouter.address, token1TotalSupply);
    await token1.connect(addr1).approve(uniswapRouter.address, token1TotalSupply);
    await token1.connect(addr2).approve(uniswapRouter.address, token1TotalSupply);
    await token1.connect(addr3).approve(uniswapRouter.address, token1TotalSupply);
    await token2.connect(owner).approve(pairToken1Token2.address, token2TotalSupply);
    await token2.connect(addr1).approve(pairToken1Token2.address, token2TotalSupply);
    await token2.connect(addr2).approve(pairToken1Token2.address, token2TotalSupply);
    await token2.connect(addr3).approve(pairToken1Token2.address, token2TotalSupply);
    await token2.connect(owner).approve(uniswapRouter.address, token2TotalSupply);
    await token2.connect(addr1).approve(uniswapRouter.address, token2TotalSupply);
    await token2.connect(addr2).approve(uniswapRouter.address, token2TotalSupply);
    await token2.connect(addr3).approve(uniswapRouter.address, token2TotalSupply);
    await pairToken1Token2.connect(owner).approve(uniswapRouter.address, token2TotalSupply);

    await token1.connect(owner).transfer(pairToken1Token2.address, token1Liq);
    await token2.connect(owner).transfer(pairToken1Token2.address, token2Liq);
    await pairToken1Token2.connect(owner).mint(await owner.getAddress());
    await token1.connect(addr1).transfer(pairToken1Token2.address, token1Liq);
    await token2.connect(addr1).transfer(pairToken1Token2.address, token2Liq);
    await pairToken1Token2.connect(addr1).mint(await addr1.getAddress());
    await token1.connect(addr2).transfer(pairToken1Token2.address, token1Liq);
    await token2.connect(addr2).transfer(pairToken1Token2.address, token2Liq);
    await pairToken1Token2.connect(addr2).mint(await addr2.getAddress());
    await token1.connect(addr3).transfer(pairToken1Token2.address, token1Liq);
    await token2.connect(addr3).transfer(pairToken1Token2.address, token2Liq);
    await pairToken1Token2.connect(addr3).mint(await addr3.getAddress());

    let block = await network.provider.send("eth_getBlockByNumber",["latest",true]);
    let current = parseInt(block.timestamp, 16);
    expiration1 = current + 1 * 86400;
    expiration2 = current + 2 * 86400;
    expiration3 = current + 3 * 86400;

    let tx = await (await ACOFactory.createAcoToken(token1.address, token2.address, true, acoToken1Token2CallPrice, expiration1, maxExercisedAccounts)).wait();
    let result0 = tx.events[tx.events.length - 1].args;
    ACOToken1Token2Call = await ethers.getContractAt("ACOToken", result0.acoToken);

    let tx1 = await (await ACOFactory.createAcoToken(token1.address, token2.address, true, acoToken1Token2CallPrice2, expiration2, maxExercisedAccounts)).wait();
    let result1 = tx1.events[tx1.events.length - 1].args;
    ACOToken1Token2Call2 = await ethers.getContractAt("ACOToken", result1.acoToken);

    let tx2 = await (await ACOFactory.createAcoToken(token1.address, token2.address, false, acoToken1Token2PutPrice, expiration2, maxExercisedAccounts)).wait();
    let result2 = tx2.events[tx2.events.length - 1].args;
    ACOToken1Token2Put = await ethers.getContractAt("ACOToken", result2.acoToken);

    let tx3 = await (await ACOFactory.createAcoToken(token1.address, token2.address, false, acoToken1Token2PutPrice2, expiration3, maxExercisedAccounts)).wait();
    let result3 = tx3.events[tx3.events.length - 1].args;
    ACOToken1Token2Put2 = await ethers.getContractAt("ACOToken", result3.acoToken);

    let tx4 = await (await ACOFactory.createAcoToken(AddressZero, token2.address, true, acoEthToken2CallPrice, expiration1, maxExercisedAccounts)).wait();
    let result4 = tx4.events[tx4.events.length - 1].args;
    ACOEthToken2Call = await ethers.getContractAt("ACOToken", result4.acoToken);

    let tx5 = await (await ACOFactory.createAcoToken(AddressZero, token2.address, true, acoEthToken2CallPrice2, expiration2, maxExercisedAccounts)).wait();
    let result5 = tx5.events[tx5.events.length - 1].args;
    ACOEthToken2Call2 = await ethers.getContractAt("ACOToken", result5.acoToken);

    let tx6 = await (await ACOFactory.createAcoToken(AddressZero, token2.address, false, acoEthToken2PutPrice, expiration2, maxExercisedAccounts)).wait();
    let result6 = tx6.events[tx6.events.length - 1].args;
    ACOEthToken2Put = await ethers.getContractAt("ACOToken", result6.acoToken);

    let tx7 = await (await ACOFactory.createAcoToken(AddressZero, token2.address, false, acoEthToken2PutPrice2, expiration3, maxExercisedAccounts)).wait();
    let result7 = tx7.events[tx7.events.length - 1].args;
    ACOEthToken2Put2 = await ethers.getContractAt("ACOToken", result7.acoToken);

    await ACOEthToken2Call.mintPayable({value: acoCallTotal});
    await ACOEthToken2Call2.mintPayable({value: acoCallTotal});
    await token2.connect(owner).approve(ACOEthToken2Put.address, token2TotalSupply);
    await token2.connect(owner).approve(ACOEthToken2Put2.address, token2TotalSupply);
    await ACOEthToken2Put.mint(acoPutTotal);
    await ACOEthToken2Put2.mint(acoPutTotal);

    let tx8 = await (await ACOPoolFactory.createAcoPool(token1.address, token2.address, true, token1Token2BaseVolatility, await owner.getAddress(), defaultStrategy.address, [0, toleranceBelowMax, 0, toleranceAboveMax, minExpiration, maxExpiration])).wait();
    let result8 = tx8.events[tx8.events.length - 1].args;
    ACOPoolToken1Token2Call = await ethers.getContractAt("ACOPool2", result8.acoPool);

    let tx9 = await (await ACOPoolFactory.createAcoPool(token1.address, token2.address, false, token1Token2BaseVolatility, await owner.getAddress(), defaultStrategy.address, [0, toleranceBelowMax, 0, toleranceAboveMax, minExpiration, maxExpiration])).wait();
    let result9 = tx9.events[tx9.events.length - 1].args;
    ACOPoolToken1Token2Put = await ethers.getContractAt("ACOPool2", result9.acoPool);
    
    await token1.connect(owner).approve(ACOPoolToken1Token2Call.address, token1TotalSupply);
    await token1.connect(addr1).approve(ACOPoolToken1Token2Call.address, token1TotalSupply);
    await token1.connect(addr2).approve(ACOPoolToken1Token2Call.address, token1TotalSupply);
    await token1.connect(addr3).approve(ACOPoolToken1Token2Call.address, token1TotalSupply);
    await token2.connect(owner).approve(ACOPoolToken1Token2Call.address, token2TotalSupply);
    await token2.connect(addr1).approve(ACOPoolToken1Token2Call.address, token2TotalSupply);
    await token2.connect(addr2).approve(ACOPoolToken1Token2Call.address, token2TotalSupply);
    await token2.connect(addr3).approve(ACOPoolToken1Token2Call.address, token2TotalSupply);
    await token2.connect(owner).approve(ACOPoolToken1Token2Put.address, token2TotalSupply);
    await token2.connect(addr1).approve(ACOPoolToken1Token2Put.address, token2TotalSupply);
    await token2.connect(addr2).approve(ACOPoolToken1Token2Put.address, token2TotalSupply);
    await token2.connect(addr3).approve(ACOPoolToken1Token2Put.address, token2TotalSupply);

    await ACOPoolToken1Token2Call.connect(owner).deposit(poolCallBal, 1, await owner.getAddress(), false);
    await ACOPoolToken1Token2Call.connect(addr1).deposit(poolCallBal, 1, await addr1.getAddress(), false);
    await ACOPoolToken1Token2Call.connect(addr2).deposit(poolCallBal, 1, await addr2.getAddress(), false);
    await ACOPoolToken1Token2Call.connect(addr3).deposit(poolCallBal, 1, await addr3.getAddress(), false);
    await ACOPoolToken1Token2Put.connect(owner).deposit(poolPutBal, 1, await owner.getAddress(), false);
    await ACOPoolToken1Token2Put.connect(addr1).deposit(poolPutBal, 1, await addr1.getAddress(), false);
    await ACOPoolToken1Token2Put.connect(addr2).deposit(poolPutBal, 1, await addr2.getAddress(), false);
    await ACOPoolToken1Token2Put.connect(addr3).deposit(poolPutBal, 1, await addr3.getAddress(), false);

    acoRewards = await (await ethers.getContractFactory("ACORewards")).deploy();
  });

  describe("ACORewards user transactions", function () {
    it("Check deposit behavior", async function () {
      const oUni = await pairToken1Token2.balanceOf(await owner.getAddress());
      const a1Uni = await pairToken1Token2.balanceOf(await addr1.getAddress());
      const a2Uni = await pairToken1Token2.balanceOf(await addr2.getAddress());
      const a3Uni = await pairToken1Token2.balanceOf(await addr3.getAddress());  
    
      // await expect(
      //   acoRewards.connect(owner).deposit(0, poolCallBal)
      // ).to.be.revertedWith("LP token is forbidden");

      await acoRewards.setLPTokens([ACOPoolToken1Token2Call.address], [100000]);

      await expect(
        acoRewards.connect(owner).deposit(0, poolCallBal)
      ).to.be.revertedWith("LP token is forbidden");

      await acoRewards.setCurrentReward(ACOEthToken2Call.address, 100000);

      await expect(
        acoRewards.connect(owner).deposit(0, 0)
      ).to.be.revertedWith("Invalid amount");

      await expect(
        acoRewards.connect(owner).deposit(0, poolCallBal)
      ).to.be.revertedWith("transferFrom");

      await ACOPoolToken1Token2Call.connect(owner).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr1).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr2).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr3).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Put.connect(owner).approve(acoRewards.address, token2TotalSupply);
      await ACOPoolToken1Token2Put.connect(addr1).approve(acoRewards.address, token2TotalSupply);
      await ACOPoolToken1Token2Put.connect(addr2).approve(acoRewards.address, token2TotalSupply);
      await ACOPoolToken1Token2Put.connect(addr3).approve(acoRewards.address, token2TotalSupply);

      await acoRewards.connect(owner).deposit(0, poolCallBal);
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal);
      
      await acoRewards.connect(addr1).deposit(0, poolCallBal);
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2));

      await acoRewards.connect(addr2).deposit(0, poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2).add(poolCallBal.div(2)));

      let ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ro._amounts[0]).to.equal(150000);
      let ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(50000);
      let ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);

      await network.provider.send("evm_mine");

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ro._amounts[0]).to.equal(190000);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(90000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._amounts[0]).to.equal(20000);

      await acoRewards.setLPTokens([ACOPoolToken1Token2Put.address], [100000]);

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ro._amounts[0]).to.equal(230000);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(130000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._amounts[0]).to.equal(40000);

      let pa3 = await ACOPoolToken1Token2Put.balanceOf(await addr3.getAddress());
      await acoRewards.connect(addr3).deposit(1, pa3);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(pa3);
      expect(await ACOPoolToken1Token2Put.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3);
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(pa3);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2).add(poolCallBal.div(2)));
      
      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ro._amounts[0]).to.equal(250000);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(150000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._amounts[0]).to.equal(50000);

      await acoRewards.connect(addr2).deposit(0, poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(3));

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ro._amounts[0]).to.equal(270000);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(170000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(49999);
      
      await network.provider.send("evm_mine");

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ro._amounts[0]).to.equal(286666);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(186666);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(76666);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(99999);

      await acoRewards.setCurrentReward(ACOEthToken2Call2.address, 100000);

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ro._amounts[0]).to.equal(303333);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(203333);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(93333);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(149999);

      await expect(
        acoRewards.connect(owner).claimReward(0)
      ).to.be.revertedWith("transfer");

      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(acoCallTotal);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(acoCallTotal);
      await acoRewards.connect(owner).withdraw(0, poolCallBal);
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(pa3);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3);
      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(acoCallTotal);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(acoCallTotal);
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await addr3.getAddress())).to.equal(0);

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(2);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ro._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(303333);
      expect(ro._amounts[1]).to.equal(33333);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra1._amounts[0]).to.equal(203333);
      expect(ra1._amounts[1]).to.equal(33333);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra2._amounts[0]).to.equal(93333);
      expect(ra2._amounts[1]).to.equal(33333);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(149999);
      expect(ra3._amounts[1]).to.equal(99999);
      
      await network.provider.send("evm_mine");

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(2);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ro._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(303333);
      expect(ro._amounts[1]).to.equal(33333);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra1._amounts[0]).to.equal(203333);
      expect(ra1._amounts[1]).to.equal(58333);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra2._amounts[0]).to.equal(93333);
      expect(ra2._amounts[1]).to.equal(58333);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(149999);
      expect(ra3._amounts[1]).to.equal(149999);

      await ACOEthToken2Call.transfer(acoRewards.address, acoCallTotal);
      await ACOEthToken2Call2.transfer(acoRewards.address, acoCallTotal);

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(2);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ro._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(303333);
      expect(ro._amounts[1]).to.equal(33333);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra1._amounts[0]).to.equal(203333);
      expect(ra1._amounts[1]).to.equal(108333);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra2._amounts[0]).to.equal(93333);
      expect(ra2._amounts[1]).to.equal(108333);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(149999);
      expect(ra3._amounts[1]).to.equal(249999);

      let poc1 = await ACOEthToken2Call.balanceOf(await owner.getAddress());
      let poc2 = await ACOEthToken2Call2.balanceOf(await owner.getAddress());
      await acoRewards.connect(owner).deposit(0, poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(pa3);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2).add(poolCallBal.div(2)));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3);
      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(poc1.add(303333));
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(poc2.add(33333));
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await addr3.getAddress())).to.equal(0);

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra1._amounts[0]).to.equal(203333);
      expect(ra1._amounts[1]).to.equal(133333);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra2._amounts[0]).to.equal(93333);
      expect(ra2._amounts[1]).to.equal(133333);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(149999);
      expect(ra3._amounts[1]).to.equal(299999);

      await acoRewards.connect(owner).deposit(1, pa3);
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(pa3);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(pa3);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2).add(poolCallBal.div(2)));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3.mul(2));
      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(poc1.add(303333));
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(poc2.add(33333));
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await addr3.getAddress())).to.equal(0);

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(10000);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra1._amounts[0]).to.equal(203333);
      expect(ra1._amounts[1]).to.equal(153333);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra2._amounts[0]).to.equal(93333);
      expect(ra2._amounts[1]).to.equal(153333);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(149999);
      expect(ra3._amounts[1]).to.equal(349999);
      
      await network.provider.send("evm_mine");

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(20000);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra1._amounts[0]).to.equal(203333);
      expect(ra1._amounts[1]).to.equal(173333);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra2._amounts[0]).to.equal(93333);
      expect(ra2._amounts[1]).to.equal(173333);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(24999);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(149999);
      expect(ra3._amounts[1]).to.equal(374999);

      await acoRewards.connect(addr1).withdraw(0, poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(pa3);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(pa3);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3.mul(2));
      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(poc1.add(303333));
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(203333);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(poc2.add(33333));
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(193333);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await addr3.getAddress())).to.equal(0);
   
      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(30000);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra2._amounts[0]).to.equal(93333);
      expect(ra2._amounts[1]).to.equal(193333);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(49999);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(149999);
      expect(ra3._amounts[1]).to.equal(399999);
      
      await acoRewards.withdrawStuckToken(ACOEthToken2Call.address, await ACOEthToken2Call.balanceOf(acoRewards.address), await owner.getAddress());
      
      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(42500);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ra1._amounts[0]).to.equal(12500);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra2._amounts[0]).to.equal(93333);
      expect(ra2._amounts[1]).to.equal(218333);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(74999);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(149999);
      expect(ra3._amounts[1]).to.equal(424999);
      
      let block = await network.provider.send("eth_getBlockByNumber",["latest",true]);
      let current = parseInt(block.timestamp, 16);
      await network.provider.send("evm_setNextBlockTimestamp", [expiration1]);
      await network.provider.send("evm_mine");
      let toAdd12halfCall = (expiration1 - current) * 12500;
      let toAdd12halfPut = (expiration1 - current) * 25000;

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(42500 + toAdd12halfCall);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ra1._amounts[0]).to.equal(12500 + toAdd12halfCall);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ra2._amounts[0]).to.equal(218333 + toAdd12halfCall * 2);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(74999 + toAdd12halfPut);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(424999 + toAdd12halfPut);
      
      await ACOEthToken2Call.transfer(acoRewards.address, await ACOEthToken2Call.balanceOf(await owner.getAddress()));
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(pa3);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(pa3);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3.mul(2));
      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(203333);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(poc2.add(33333));
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(193333);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await addr3.getAddress())).to.equal(0);

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(42500 + toAdd12halfCall + 12500);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ra1._amounts[0]).to.equal(12500 + toAdd12halfCall + 12500);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ra2._amounts[0]).to.equal(218333 + toAdd12halfCall * 2 + 25000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(74999 + toAdd12halfPut + 25000);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(424999 + toAdd12halfPut + 25000);

      expect(await acoRewards.acosLength()).to.equal(2);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Call.address);
      expect(await acoRewards.acos(1)).to.equal(ACOEthToken2Call2.address);
      await acoRewards.connect(addr1).deposit(0, poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(pa3);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(pa3);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2).add(poolCallBal.div(2)));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3.mul(2));
      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(203333);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(poc2.add(33333));
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(193333 + 12500 + toAdd12halfCall + 12500 + 12500);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.acosLength()).to.equal(1);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Call2.address);

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(42500 + toAdd12halfCall + 12500 + 12500);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ra2._amounts[0]).to.equal(218333 + toAdd12halfCall * 2 + 25000 + 25000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(74999 + toAdd12halfPut + 25000 + 25000);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(424999 + toAdd12halfPut + 25000 + 25000);

      await acoRewards.connect(addr2).claimReward(0);
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(pa3);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(pa3);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2).add(poolCallBal.div(2)));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3.mul(2));
      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(203333);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(poc2.add(33333));
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(193333 + 12500 + toAdd12halfCall + 12500 + 12500);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(218333 + toAdd12halfCall * 2 + 25000 + 25000 + 20000);
      expect(await ACOEthToken2Call2.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.acosLength()).to.equal(1);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Call2.address);

      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(42500 + toAdd12halfCall + 12500 + 12500 + 10000);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._amounts[0]).to.equal(20000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(74999 + toAdd12halfPut + 25000 + 25000 + 25000);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(424999 + toAdd12halfPut + 25000 + 25000 + 25000);

      await acoRewards.connect(addr2).withdraw(0, poolCallBal);
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(pa3);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(pa3);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.add(poolCallBal.div(2)));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3.mul(2));
      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(203333);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(poc2.add(33333));
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(193333 + 12500 + toAdd12halfCall + 12500 + 12500);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(218333 + toAdd12halfCall * 2 + 25000 + 25000 + 20000 + 20000);
      expect(await ACOEthToken2Call2.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.acosLength()).to.equal(1);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Call2.address);
      
      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(42500 + toAdd12halfCall + 12500 + 12500 + 10000 + 10000);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._amounts[0]).to.equal(40000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(74999 + toAdd12halfPut + 25000 + 25000 + 25000 + 25000);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ra3._amounts[0]).to.equal(424999 + toAdd12halfPut + 25000 + 25000 + 25000 + 25000);

      await acoRewards.connect(addr3).withdraw(1, pa3);
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(pa3);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.add(poolCallBal.div(2)));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3);
      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(203333);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(poc2.add(33333));
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(193333 + 12500 + toAdd12halfCall + 12500 + 12500);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(218333 + toAdd12halfCall * 2 + 25000 + 25000 + 20000 + 20000);
      expect(await ACOEthToken2Call2.balanceOf(await addr3.getAddress())).to.equal(424999 + toAdd12halfPut + 25000 + 25000 + 25000 + 25000 + 25000);
      expect(await acoRewards.acosLength()).to.equal(1);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Call2.address);
      
      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(42500 + toAdd12halfCall + 12500 + 12500 + 10000 + 10000 + 16666);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._amounts[0]).to.equal(73333);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(74999 + toAdd12halfPut + 25000 + 25000 + 25000 + 25000 + 25000);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);

      await acoRewards.connect(addr1).withdraw(0, poolCallBal);
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(pa3);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa3);
      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(203333);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(poc2.add(33333));
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(193333 + 12500 + toAdd12halfCall + 12500 + 12500 + 106666);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(218333 + toAdd12halfCall * 2 + 25000 + 25000 + 20000 + 20000);
      expect(await ACOEthToken2Call2.balanceOf(await addr3.getAddress())).to.equal(424999 + toAdd12halfPut + 25000 + 25000 + 25000 + 25000 + 25000);
      expect(await acoRewards.acosLength()).to.equal(1);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Call2.address);
      
      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(42500 + toAdd12halfCall + 12500 + 12500 + 10000 + 10000 + 16666 + 16667);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(1);
      expect(ro._acos[0]).to.equal(ACOEthToken2Call2.address);
      expect(ro._amounts[0]).to.equal(74999 + toAdd12halfPut + 25000 + 25000 + 25000 + 25000 + 25000 + 50000);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);

      await acoRewards.connect(owner).withdraw(0, poolCallBal.div(2));
      await acoRewards.connect(owner).withdraw(1, pa3);
      expect(await acoRewards.balanceOf(0, await owner.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await owner.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await owner.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await owner.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(203333);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await owner.getAddress())).to.equal(poc2.add(33333 + (42500 + toAdd12halfCall + 12500 + 12500 + 10000 + 10000 + 16666 + 16667) + (74999 + toAdd12halfPut + 25000 + 25000 + 25000 + 25000 + 25000 + 50000) + 150000));
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(193333 + 12500 + toAdd12halfCall + 12500 + 12500 + 106666);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(218333 + toAdd12halfCall * 2 + 25000 + 25000 + 20000 + 20000);
      expect(await ACOEthToken2Call2.balanceOf(await addr3.getAddress())).to.equal(424999 + toAdd12halfPut + 25000 + 25000 + 25000 + 25000 + 25000);
      expect(await acoRewards.acosLength()).to.equal(1);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Call2.address);
      
      ro = await acoRewards.pendingReward(0, await owner.getAddress());
      expect(ro._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ro = await acoRewards.pendingReward(1, await owner.getAddress());
      expect(ro._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
    });
    it("Check withdraw behavior", async function () {
      const oUni = await pairToken1Token2.balanceOf(await owner.getAddress());
      const a1Uni = await pairToken1Token2.balanceOf(await addr1.getAddress());
      const a2Uni = await pairToken1Token2.balanceOf(await addr2.getAddress());
      const a3Uni = await pairToken1Token2.balanceOf(await addr3.getAddress());  

      await acoRewards.setLPTokens([ACOPoolToken1Token2Call.address, ACOPoolToken1Token2Put.address], [200000,100000]);
      await acoRewards.setCurrentReward(ACOEthToken2Call.address, 100000);

      await ACOPoolToken1Token2Call.connect(owner).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr1).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr2).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr3).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Put.connect(owner).approve(acoRewards.address, token2TotalSupply);
      await ACOPoolToken1Token2Put.connect(addr1).approve(acoRewards.address, token2TotalSupply);
      await ACOPoolToken1Token2Put.connect(addr2).approve(acoRewards.address, token2TotalSupply);
      await ACOPoolToken1Token2Put.connect(addr3).approve(acoRewards.address, token2TotalSupply);
      await pairToken1Token2.connect(owner).approve(acoRewards.address, oUni);
      await pairToken1Token2.connect(addr1).approve(acoRewards.address, a1Uni);
      await pairToken1Token2.connect(addr2).approve(acoRewards.address, a2Uni);
      await pairToken1Token2.connect(addr3).approve(acoRewards.address, a3Uni);

      await acoRewards.connect(addr1).deposit(0, poolCallBal);
      await acoRewards.connect(addr2).deposit(0, poolCallBal);
      let pa1 = await ACOPoolToken1Token2Put.balanceOf(await addr1.getAddress());
      await acoRewards.connect(addr1).deposit(1, pa1);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(pa1);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa1);

      let ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(99999);
      let ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(33333);
      let ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(133332);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(66666);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(33332);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);

      await acoRewards.setLPTokens([pairToken1Token2.address, ACOPoolToken1Token2Call.address, ACOPoolToken1Token2Put.address], [600000, 300000, 100000]);
      await acoRewards.connect(addr3).deposit(2, a3Uni);
      await acoRewards.connect(addr1).deposit(2, a1Uni);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(pa1);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(a1Uni);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa1);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a1Uni.add(a3Uni));

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(196666);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(130000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(86665);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(60000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(211666);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(145000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(96665);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(30000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(90000);

      await acoRewards.connect(addr1).withdraw(0, poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(pa1);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(a1Uni);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.add(poolCallBal.div(2)));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa1);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a1Uni.add(a3Uni));

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(226666);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(160000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(106665);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(60000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(120000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(236666);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(180000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(116665);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(90000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(150000);

      await ACOEthToken2Call.transfer(acoRewards.address, await ACOEthToken2Call.balanceOf(await owner.getAddress()));
      await acoRewards.connect(addr1).withdraw(0, poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(pa1);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(a1Uni);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa1);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a1Uni.add(a3Uni));
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(256666);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(220000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(136665);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(150000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(210000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(250000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(146665);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(180000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(240000);

      await ACOEthToken2Put.transfer(acoRewards.address, await ACOEthToken2Put.balanceOf(await owner.getAddress()));
      await acoRewards.setCurrentReward(ACOEthToken2Put.address, 100000);
      await acoRewards.connect(addr1).deposit(0, poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(pa1);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(a1Uni);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.add(poolCallBal.div(2)));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa1);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a1Uni.add(a3Uni));
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(256666);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(310000);
      expect(ra2._amounts[1]).to.equal(30000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(166665);
      expect(ra1._amounts[1]).to.equal(9999);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      expect(ra1._amounts[1]).to.equal(30000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(300000);
      expect(ra3._amounts[1]).to.equal(30000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(10000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(310000);
      expect(ra2._amounts[1]).to.equal(50000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(166665);
      expect(ra1._amounts[1]).to.equal(19999);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      expect(ra1._amounts[1]).to.equal(60000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(300000);
      expect(ra3._amounts[1]).to.equal(60000);
      
      await acoRewards.setLPTokens([pairToken1Token2.address, ACOPoolToken1Token2Call.address, ACOPoolToken1Token2Put.address], [500000, 300000, 200000]);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(20000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(310000);
      expect(ra2._amounts[1]).to.equal(70000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(166665);
      expect(ra1._amounts[1]).to.equal(29999);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      expect(ra1._amounts[1]).to.equal(90000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(300000);
      expect(ra3._amounts[1]).to.equal(90000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(30000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(310000);
      expect(ra2._amounts[1]).to.equal(90000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(166665);
      expect(ra1._amounts[1]).to.equal(49999);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      expect(ra1._amounts[1]).to.equal(115000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(300000);
      expect(ra3._amounts[1]).to.equal(115000);

      await acoRewards.setCurrentReward(ACOEthToken2Put.address, 200000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(40000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(310000);
      expect(ra2._amounts[1]).to.equal(110000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(166665);
      expect(ra1._amounts[1]).to.equal(69999);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      expect(ra1._amounts[1]).to.equal(140000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(300000);
      expect(ra3._amounts[1]).to.equal(140000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(60000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(310000);
      expect(ra2._amounts[1]).to.equal(150000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(166665);
      expect(ra1._amounts[1]).to.equal(109999);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      expect(ra1._amounts[1]).to.equal(190000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(300000);
      expect(ra3._amounts[1]).to.equal(190000);

      await acoRewards.connect(addr2).withdraw(0, poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(pa1);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(a1Uni);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa1);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a1Uni.add(a3Uni));
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(256666);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(310000);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(190000);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(0);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(80000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(166665);
      expect(ra1._amounts[1]).to.equal(149999);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      expect(ra1._amounts[1]).to.equal(240000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(300000);
      expect(ra3._amounts[1]).to.equal(240000);

      await network.provider.send("evm_mine");
      
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(110000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(30000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(166665);
      expect(ra1._amounts[1]).to.equal(189999);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      expect(ra1._amounts[1]).to.equal(290000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(300000);
      expect(ra3._amounts[1]).to.equal(290000);

      await acoRewards.setCurrentReward(ACOEthToken2Call.address, 300000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(140000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(166665);
      expect(ra1._amounts[1]).to.equal(229999);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      expect(ra1._amounts[1]).to.equal(340000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(300000);
      expect(ra3._amounts[1]).to.equal(340000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(45000);
      expect(ra1._amounts[1]).to.equal(140000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(45000);
      expect(ra2._amounts[1]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(226665);
      expect(ra1._amounts[1]).to.equal(229999);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(315000);
      expect(ra1._amounts[1]).to.equal(340000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(375000);
      expect(ra3._amounts[1]).to.equal(340000);

      await acoRewards.setLPTokens([pairToken1Token2.address], [0]);

      await expect(
        acoRewards.connect(addr2).deposit(2, a2Uni)
      ).to.be.revertedWith("LP token is forbidden");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(180000);
      expect(ra1._amounts[1]).to.equal(140000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(180000);
      expect(ra2._amounts[1]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(406665);
      expect(ra1._amounts[1]).to.equal(229999);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(390000);
      expect(ra1._amounts[1]).to.equal(340000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(450000);
      expect(ra3._amounts[1]).to.equal(340000);

      await acoRewards.connect(addr1).withdraw(1, pa1);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(a1Uni);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(0);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a1Uni.add(a3Uni));
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(256666 + 526665);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(310000);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(229999);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(190000);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(0);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(270000);
      expect(ra1._amounts[1]).to.equal(140000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(270000);
      expect(ra2._amounts[1]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(390000);
      expect(ra1._amounts[1]).to.equal(340000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(450000);
      expect(ra3._amounts[1]).to.equal(340000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(360000);
      expect(ra1._amounts[1]).to.equal(140000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(360000);
      expect(ra2._amounts[1]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(390000);
      expect(ra1._amounts[1]).to.equal(340000);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(450000);
      expect(ra3._amounts[1]).to.equal(340000);

      await acoRewards.connect(addr1).withdraw(2, a1Uni);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(0);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(256666 + 526665 + 390000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(310000);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(229999 + 340000);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(190000);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(0);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(450000);
      expect(ra1._amounts[1]).to.equal(140000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(450000);
      expect(ra2._amounts[1]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(450000);
      expect(ra3._amounts[1]).to.equal(340000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(540000);
      expect(ra1._amounts[1]).to.equal(140000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(540000);
      expect(ra2._amounts[1]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(450000);
      expect(ra3._amounts[1]).to.equal(340000);

      await acoRewards.setLPTokens([pairToken1Token2.address], [500000]);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(630000);
      expect(ra1._amounts[1]).to.equal(140000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(630000);
      expect(ra2._amounts[1]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(450000);
      expect(ra3._amounts[1]).to.equal(340000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(675000);
      expect(ra1._amounts[1]).to.equal(140000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(675000);
      expect(ra2._amounts[1]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(600000);
      expect(ra3._amounts[1]).to.equal(340000);

      await acoRewards.connect(addr1).withdraw(0, poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.div(2));
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(0);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(256666 + 526665 + 390000 + 720000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(310000);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(229999 + 340000 + 140000);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(190000);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(0);
      
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(720000);
      expect(ra2._amounts[1]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(750000);
      expect(ra3._amounts[1]).to.equal(340000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(810000);
      expect(ra2._amounts[1]).to.equal(60000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(900000);
      expect(ra3._amounts[1]).to.equal(340000);

      await expect(
        acoRewards.connect(addr2).withdraw(0, poolCallBal)
      ).to.be.revertedWith("Invalid amount");

      await acoRewards.connect(addr2).withdraw(0, poolCallBal.div(2));
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(0);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(256666 + 526665 + 390000 + 720000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(310000 + 990000);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(229999 + 340000 + 140000);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(190000 + 60000);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(0);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(1200000);
      expect(ra3._amounts[1]).to.equal(340000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(1350000);
      expect(ra3._amounts[1]).to.equal(340000);

      await acoRewards.connect(addr3).withdraw(2, a3Uni);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(0);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(256666 + 526665 + 390000 + 720000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(310000 + 990000);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(1500000);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(229999 + 340000 + 140000);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(190000 + 60000);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(340000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);

      await expect(
        acoRewards.connect(addr2).withdraw(3, a2Uni)
      ).to.be.revertedWith("Invalid amount");

      await expect(
        acoRewards.connect(addr3).withdraw(2, a3Uni)
      ).to.be.revertedWith("Invalid amount");
    });
    it("Check claim behavior", async function () {
      const oUni = await pairToken1Token2.balanceOf(await owner.getAddress());
      const a1Uni = await pairToken1Token2.balanceOf(await addr1.getAddress());
      const a2Uni = await pairToken1Token2.balanceOf(await addr2.getAddress());
      const a3Uni = await pairToken1Token2.balanceOf(await addr3.getAddress());  

      await acoRewards.setLPTokens([ACOPoolToken1Token2Call.address, ACOPoolToken1Token2Put.address, pairToken1Token2.address], [400000,100000,500000]);
      await acoRewards.setCurrentReward(ACOEthToken2Call.address, 100000);

      await ACOPoolToken1Token2Call.connect(owner).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr1).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr2).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr3).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Put.connect(owner).approve(acoRewards.address, token2TotalSupply);
      await ACOPoolToken1Token2Put.connect(addr1).approve(acoRewards.address, token2TotalSupply);
      await ACOPoolToken1Token2Put.connect(addr2).approve(acoRewards.address, token2TotalSupply);
      await ACOPoolToken1Token2Put.connect(addr3).approve(acoRewards.address, token2TotalSupply);
      await pairToken1Token2.connect(owner).approve(acoRewards.address, oUni);
      await pairToken1Token2.connect(addr1).approve(acoRewards.address, a1Uni);
      await pairToken1Token2.connect(addr2).approve(acoRewards.address, a2Uni);
      await pairToken1Token2.connect(addr3).approve(acoRewards.address, a3Uni);

      await acoRewards.connect(addr1).deposit(0, poolCallBal);
      let pa2 = await ACOPoolToken1Token2Put.balanceOf(await addr2.getAddress());
      await acoRewards.connect(addr2).deposit(1, pa2);
      await acoRewards.connect(addr3).deposit(2, a3Uni);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(pa2);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa2);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);

      let ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(80000);
      let ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      let ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(9999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(120000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(19999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(50000);

      await expect(
        acoRewards.connect(addr1).claimReward(0)
      ).to.be.revertedWith("transfer");

      await ACOEthToken2Call.transfer(acoRewards.address, await ACOEthToken2Call.balanceOf(await owner.getAddress()));
      await acoRewards.connect(addr1).claimReward(0);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(pa2);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa2);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(240000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(49999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(200000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(40000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(59999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(250000);

      await acoRewards.connect(addr1).claimReward(1);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(pa2);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa2);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(240000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(80000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(69999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(300000);

      await acoRewards.setCurrentReward(ACOEthToken2Call.address, 200000);
      await acoRewards.connect(addr2).claimReward(1);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(pa2);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa2);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(240000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(99999);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(0);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(200000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(450000);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(280000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(19999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(550000);

      await ACOEthToken2Put.transfer(acoRewards.address, await ACOEthToken2Put.balanceOf(await owner.getAddress()));
      await acoRewards.setCurrentReward(ACOEthToken2Put.address, 100000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(440000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(59999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(750000);

      await network.provider.send("evm_mine");
      
      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(440000);
      expect(ra1._amounts[1]).to.equal(40000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(59999);
      expect(ra2._amounts[1]).to.equal(9999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(2);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(750000);
      expect(ra3._amounts[1]).to.equal(50000);

      await acoRewards.connect(addr3).claimReward(2);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(pa2);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa2);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(240000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(99999);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(750000);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(100000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(440000);
      expect(ra1._amounts[1]).to.equal(80000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(59999);
      expect(ra2._amounts[1]).to.equal(19999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(440000);
      expect(ra1._amounts[1]).to.equal(120000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(59999);
      expect(ra2._amounts[1]).to.equal(29999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(50000);

      await acoRewards.withdrawStuckToken(ACOEthToken2Put.address, await ACOEthToken2Put.balanceOf(acoRewards.address), await owner.getAddress());
      await expect(
        acoRewards.connect(addr1).claimReward(0)
      ).to.be.revertedWith("transfer");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(2);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(440000);
      expect(ra1._amounts[1]).to.equal(200000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(59999);
      expect(ra2._amounts[1]).to.equal(49999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(150000);

      await acoRewards.connect(addr1).withdraw(0, poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(pa2);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa2);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(240000 + 440000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(99999);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(750000);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(100000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(2);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._acos[1]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(59999);
      expect(ra2._amounts[1]).to.equal(59999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(200000);

      await ACOEthToken2Put.transfer(acoRewards.address, await ACOEthToken2Put.balanceOf(await owner.getAddress()));
      await acoRewards.connect(addr2).claimReward(1);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(pa2);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa2);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(240000 + 440000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(99999 + 59999);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(750000);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(79999);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(100000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(300000);

      await acoRewards.connect(addr3).claimReward(2);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(pa2);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa2);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(240000 + 440000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(99999 + 59999);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(750000);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(79999);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(100000 + 350000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra1._amounts[0]).to.equal(240000);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(9999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);

      await acoRewards.connect(addr1).claimReward(0);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(pa2);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(pa2);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(240000 + 440000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(99999 + 59999);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(750000);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(240000);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(79999);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(100000 + 350000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra2._amounts[0]).to.equal(19999);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(50000);

      await acoRewards.connect(addr2).withdraw(1, pa2);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(0);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(240000 + 440000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(99999 + 59999);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(750000);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(240000);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(79999 + 29999);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(100000 + 350000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Put.address);
      expect(ra3._amounts[0]).to.equal(100000);

      await acoRewards.connect(addr3).claimReward(2);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(a3Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(0);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(a3Uni);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(240000 + 440000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(99999 + 59999);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(750000);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(240000);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(79999 + 29999);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(100000 + 350000 + 150000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);

      await acoRewards.connect(addr3).withdraw(2, a3Uni);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr3.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(2, await addr3.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOPoolToken1Token2Put.balanceOf(acoRewards.address)).to.equal(0);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(240000 + 440000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(99999 + 59999);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(750000);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(240000);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(79999 + 29999);
      expect(await ACOEthToken2Put.balanceOf(await addr3.getAddress())).to.equal(100000 + 350000 + 150000 + 50000);

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(1, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(1, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(1, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
      ra1 = await acoRewards.pendingReward(2, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(2, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(2, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
    });
    it("Check emergency withdraw", async function () {
      await acoRewards.setLPTokens([ACOPoolToken1Token2Call.address], [100000]);
      await ACOEthToken2Call.transfer(acoRewards.address, await ACOEthToken2Call.balanceOf(await owner.getAddress()));
      await acoRewards.setCurrentReward(ACOEthToken2Call.address, 300000);

      await ACOPoolToken1Token2Call.connect(owner).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr1).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr2).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr3).approve(acoRewards.address, token1TotalSupply);

      await acoRewards.connect(addr1).deposit(0, poolCallBal);
      await acoRewards.connect(addr2).deposit(0, poolCallBal);
      await acoRewards.connect(addr3).deposit(0, poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(3));
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);

      await network.provider.send("evm_mine");

      let ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(1);
      expect(ra1._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra1._amounts[0]).to.equal(550000);
      let ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(250000);
      let ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(100000);

      await acoRewards.connect(addr1).emergencyWithdraw(0);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal.mul(2));
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(1);
      expect(ra2._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra2._amounts[0]).to.equal(500000);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(350000);

      await expect(
        acoRewards.connect(addr1).emergencyWithdraw(0)
      ).to.be.revertedWith("No balance");

      await acoRewards.connect(addr2).emergencyWithdraw(0);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(poolCallBal);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(1);
      expect(ra3._acos[0]).to.equal(ACOEthToken2Call.address);
      expect(ra3._amounts[0]).to.equal(950000);

      await acoRewards.connect(addr3).emergencyWithdraw(0);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr3.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr3.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(0);

      await network.provider.send("evm_mine");

      ra1 = await acoRewards.pendingReward(0, await addr1.getAddress());
      expect(ra1._acos.length).to.equal(0);
      ra2 = await acoRewards.pendingReward(0, await addr2.getAddress());
      expect(ra2._acos.length).to.equal(0);
      ra3 = await acoRewards.pendingReward(0, await addr3.getAddress());
      expect(ra3._acos.length).to.equal(0);
    });
  });

  describe("ACORewards admin transactions", function () {
    it("Check set LP tokens", async function () {
      let baseAlloc = ethers.BigNumber.from("100000000000000000");
      await acoRewards.setLPTokens([ACOPoolToken1Token2Call.address, pairToken1Token2.address], [baseAlloc, baseAlloc.mul(2)]);
      expect(await acoRewards.poolLength()).to.equal(2);
      expect((await acoRewards.poolInfo(0))[0]).to.equal(ACOPoolToken1Token2Call.address);
      expect((await acoRewards.poolInfo(0))[1]).to.equal(baseAlloc);
      expect((await acoRewards.poolInfo(1))[0]).to.equal(pairToken1Token2.address);
      expect((await acoRewards.poolInfo(1))[1]).to.equal(baseAlloc.mul(2));
      expect(await acoRewards.totalAllocPoint()).to.equal(baseAlloc.mul(3));

      await expect(
        acoRewards.connect(addr1).setLPTokens([ACOPoolToken1Token2Call.address, pairToken1Token2.address], [baseAlloc, baseAlloc.mul(3)])
      ).to.be.revertedWith("Ownable: caller is not the owner");

      await ACOEthToken2Call.transfer(acoRewards.address, await ACOEthToken2Call.balanceOf(await owner.getAddress()));
      await acoRewards.setCurrentReward(ACOEthToken2Call.address, 100000);
      await ACOPoolToken1Token2Call.connect(addr1).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr2).approve(acoRewards.address, token1TotalSupply);
      await acoRewards.connect(addr1).deposit(0, poolCallBal);
      await acoRewards.connect(addr2).deposit(0, poolCallBal);

      await expect(
        acoRewards.setLPTokens([ACOPoolToken1Token2Call.address, pairToken1Token2.address, ACOPoolToken1Token2Put.address], [baseAlloc, baseAlloc.mul(2)])
      ).to.be.revertedWith("Invalid arguments");

      await expect(
        acoRewards.setLPTokens([ACOPoolToken1Token2Call.address, pairToken1Token2.address, ACOPoolToken1Token2Put.address], [baseAlloc.mul(2), baseAlloc.mul(3), baseAlloc.mul(10).add(1)])
      ).to.be.revertedWith("Invalid alloc point");

      await acoRewards.setLPTokens([ACOPoolToken1Token2Call.address, pairToken1Token2.address, ACOPoolToken1Token2Put.address], [baseAlloc.mul(2), baseAlloc.mul(3), baseAlloc.mul(5)]);
      expect(await acoRewards.poolLength()).to.equal(3);
      expect((await acoRewards.poolInfo(0))[0]).to.equal(ACOPoolToken1Token2Call.address);
      expect((await acoRewards.poolInfo(0))[1]).to.equal(baseAlloc.mul(2));
      expect((await acoRewards.poolInfo(1))[0]).to.equal(pairToken1Token2.address);
      expect((await acoRewards.poolInfo(1))[1]).to.equal(baseAlloc.mul(3));
      expect((await acoRewards.poolInfo(2))[0]).to.equal(ACOPoolToken1Token2Put.address);
      expect((await acoRewards.poolInfo(2))[1]).to.equal(baseAlloc.mul(5));
      expect(await acoRewards.totalAllocPoint()).to.equal(baseAlloc.mul(10));

      await network.provider.send("evm_mine");

      await acoRewards.setLPTokens([ACOPoolToken1Token2Put.address, ACOPoolToken1Token2Call.address, pairToken1Token2.address], [baseAlloc.mul(6), 0, baseAlloc.mul(3)]);
      expect(await acoRewards.poolLength()).to.equal(3);
      expect((await acoRewards.poolInfo(0))[0]).to.equal(ACOPoolToken1Token2Call.address);
      expect((await acoRewards.poolInfo(0))[1]).to.equal(0);
      expect((await acoRewards.poolInfo(1))[0]).to.equal(pairToken1Token2.address);
      expect((await acoRewards.poolInfo(1))[1]).to.equal(baseAlloc.mul(3));
      expect((await acoRewards.poolInfo(2))[0]).to.equal(ACOPoolToken1Token2Put.address);
      expect((await acoRewards.poolInfo(2))[1]).to.equal(baseAlloc.mul(6));
      expect(await acoRewards.totalAllocPoint()).to.equal(baseAlloc.mul(9));

      await network.provider.send("evm_mine");
      await network.provider.send("evm_mine");

      await acoRewards.setLPTokens([ACOPoolToken1Token2Put.address, ACOPoolToken1Token2Call.address, pairToken1Token2.address], [baseAlloc, baseAlloc.mul(2), 0]);
      expect(await acoRewards.poolLength()).to.equal(3);
      expect((await acoRewards.poolInfo(0))[0]).to.equal(ACOPoolToken1Token2Call.address);
      expect((await acoRewards.poolInfo(0))[1]).to.equal(baseAlloc.mul(2));
      expect((await acoRewards.poolInfo(1))[0]).to.equal(pairToken1Token2.address);
      expect((await acoRewards.poolInfo(1))[1]).to.equal(0);
      expect((await acoRewards.poolInfo(2))[0]).to.equal(ACOPoolToken1Token2Put.address);
      expect((await acoRewards.poolInfo(2))[1]).to.equal(baseAlloc);
      expect(await acoRewards.totalAllocPoint()).to.equal(baseAlloc.mul(3));

      await network.provider.send("evm_setNextBlockTimestamp", [expiration1]);
      await network.provider.send("evm_mine");

      expect(await acoRewards.acosLength()).to.equal(1);
      await acoRewards.connect(addr1).withdraw(0, poolCallBal);
      expect(await acoRewards.acosLength()).to.equal(0);
      await acoRewards.connect(addr2).withdraw(0, poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.poolLength()).to.equal(3);
      expect((await acoRewards.poolInfo(0))[0]).to.equal(ACOPoolToken1Token2Call.address);
      expect((await acoRewards.poolInfo(0))[1]).to.equal(baseAlloc.mul(2));
      expect((await acoRewards.poolInfo(1))[0]).to.equal(pairToken1Token2.address);
      expect((await acoRewards.poolInfo(1))[1]).to.equal(0);
      expect((await acoRewards.poolInfo(2))[0]).to.equal(ACOPoolToken1Token2Put.address);
      expect((await acoRewards.poolInfo(2))[1]).to.equal(baseAlloc);
      expect(await acoRewards.totalAllocPoint()).to.equal(baseAlloc.mul(3));
    });
    it("Check set current aco", async function () {
      let bigRate = ethers.BigNumber.from("10000000000000000000000000000000000000000");
      await ACOPoolToken1Token2Call.connect(addr1).approve(acoRewards.address, token1TotalSupply);
      await ACOPoolToken1Token2Call.connect(addr2).approve(acoRewards.address, token1TotalSupply);
      await ACOEthToken2Call.transfer(acoRewards.address, await ACOEthToken2Call.balanceOf(await owner.getAddress()));
      await ACOEthToken2Call2.transfer(acoRewards.address, await ACOEthToken2Call2.balanceOf(await owner.getAddress()));
      await ACOEthToken2Put.transfer(acoRewards.address, await ACOEthToken2Put.balanceOf(await owner.getAddress()));
      await ACOEthToken2Put2.transfer(acoRewards.address, await ACOEthToken2Put2.balanceOf(await owner.getAddress()));
      await acoRewards.setLPTokens([ACOPoolToken1Token2Call.address], [100000]);
      
      await acoRewards.setCurrentReward(ACOEthToken2Call.address, 100000);
      expect(await acoRewards.acosLength()).to.equal(1);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Call.address);
      expect((await acoRewards.currentReward())[0]).to.equal(ACOEthToken2Call.address);
      expect((await acoRewards.currentReward())[1]).to.equal(100000);
    
      await expect(
        acoRewards.connect(addr1).setCurrentReward(ACOEthToken2Call.address, 300000)
      ).to.be.revertedWith("Ownable: caller is not the owner");

      await expect(
        acoRewards.setCurrentReward(ACOEthToken2Call.address, bigRate.add(1))
      ).to.be.revertedWith("The reward rate is too big");

      await acoRewards.connect(addr1).deposit(0, poolCallBal);
      await acoRewards.connect(addr2).deposit(0, poolCallBal);
      await network.provider.send("evm_mine");
      await acoRewards.connect(addr1).claimReward(0);

      await acoRewards.setCurrentReward(ACOEthToken2Call.address, 200000);
      expect(await acoRewards.acosLength()).to.equal(1);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Call.address);
      expect((await acoRewards.currentReward())[0]).to.equal(ACOEthToken2Call.address);
      expect((await acoRewards.currentReward())[1]).to.equal(200000);
      await network.provider.send("evm_mine");
      await acoRewards.connect(addr1).claimReward(0);
      await network.provider.send("evm_mine");

      await network.provider.send("evm_setNextBlockTimestamp", [expiration1]);
      await network.provider.send("evm_mine");

      await acoRewards.setCurrentReward(ACOEthToken2Put.address, 300000);
      expect(await acoRewards.acosLength()).to.equal(1);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Put.address);
      expect((await acoRewards.currentReward())[0]).to.equal(ACOEthToken2Put.address);
      expect((await acoRewards.currentReward())[1]).to.equal(300000);
      await network.provider.send("evm_mine");
      await acoRewards.setCurrentReward(ACOEthToken2Call2.address, 200000);
      expect(await acoRewards.acosLength()).to.equal(2);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Put.address);
      expect(await acoRewards.acos(1)).to.equal(ACOEthToken2Call2.address);
      expect((await acoRewards.currentReward())[0]).to.equal(ACOEthToken2Call2.address);
      expect((await acoRewards.currentReward())[1]).to.equal(200000);
      await network.provider.send("evm_mine");
      await acoRewards.connect(addr1).claimReward(0);
      await network.provider.send("evm_mine");
      await acoRewards.setCurrentReward(ACOEthToken2Put.address, 500000);
      expect(await acoRewards.acosLength()).to.equal(2);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Put.address);
      expect(await acoRewards.acos(1)).to.equal(ACOEthToken2Call2.address);
      expect((await acoRewards.currentReward())[0]).to.equal(ACOEthToken2Put.address);
      expect((await acoRewards.currentReward())[1]).to.equal(500000);
      await network.provider.send("evm_mine");

      await network.provider.send("evm_setNextBlockTimestamp", [expiration2]);
      await network.provider.send("evm_mine");

      await acoRewards.setCurrentReward(ACOEthToken2Put2.address, 100000);
      expect(await acoRewards.acosLength()).to.equal(1);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Put2.address);
      expect((await acoRewards.currentReward())[0]).to.equal(ACOEthToken2Put2.address);
      expect((await acoRewards.currentReward())[1]).to.equal(100000);
      await network.provider.send("evm_mine");

      await network.provider.send("evm_setNextBlockTimestamp", [expiration3]);
      await network.provider.send("evm_mine");

      expect(await acoRewards.acosLength()).to.equal(1);
      expect(await acoRewards.acos(0)).to.equal(ACOEthToken2Put2.address);
      await acoRewards.connect(addr1).withdraw(0, poolCallBal);
      expect(await acoRewards.acosLength()).to.equal(0);
      expect((await acoRewards.currentReward())[0]).to.equal(ACOEthToken2Put2.address);
      expect((await acoRewards.currentReward())[1]).to.equal(100000);
      await acoRewards.connect(addr2).withdraw(0, poolCallBal);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr2.getAddress())).to.equal(poolCallBal);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await ACOEthToken2Call.balanceOf(await addr1.getAddress())).to.equal(450000);
      expect(await ACOEthToken2Call.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put.balanceOf(await addr1.getAddress())).to.equal(300000);
      expect(await ACOEthToken2Put.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Call2.balanceOf(await addr1.getAddress())).to.equal(200000);
      expect(await ACOEthToken2Call2.balanceOf(await addr2.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put2.balanceOf(await addr1.getAddress())).to.equal(0);
      expect(await ACOEthToken2Put2.balanceOf(await addr2.getAddress())).to.equal(0);
    });
    it("Check withdraw stuck token", async function () {
      const baseValue = ethers.BigNumber.from("10000000");
      const a1t2 = await token2.balanceOf(await addr1.getAddress());
      const a2Uni = await pairToken1Token2.balanceOf(await addr2.getAddress());
      await acoRewards.setLPTokens([ACOPoolToken1Token2Call.address, pairToken1Token2.address], [100000, 200000]);
      await ACOEthToken2Call.transfer(acoRewards.address, await ACOEthToken2Call.balanceOf(await owner.getAddress()));
      await ACOEthToken2Put.transfer(acoRewards.address, await ACOEthToken2Put.balanceOf(await owner.getAddress()));
      await acoRewards.setCurrentReward(ACOEthToken2Call.address, 100000);
      await ACOPoolToken1Token2Call.connect(addr1).approve(acoRewards.address, token1TotalSupply);
      await pairToken1Token2.connect(addr2).approve(acoRewards.address, a2Uni);
      await acoRewards.connect(addr1).deposit(0, poolCallBal);
      await acoRewards.connect(addr2).deposit(1, a2Uni);

      await token2.transfer(acoRewards.address, baseValue);

      await expect(
        acoRewards.connect(addr3).withdrawStuckToken(token2.address, baseValue, await addr3.getAddress())
      ).to.be.revertedWith("Ownable: caller is not the owner");
      
      await expect(
        acoRewards.withdrawStuckToken(ACOPoolToken1Token2Call.address, poolCallBal.div(2), await addr3.getAddress())
      ).to.be.revertedWith("Forbidden!");

      await expect(
        acoRewards.withdrawStuckToken(pairToken1Token2.address, a2Uni.div(2), await addr3.getAddress())
      ).to.be.revertedWith("Forbidden!");

      await acoRewards.withdrawStuckToken(token2.address, baseValue, await addr1.getAddress());
      expect(await token2.balanceOf(await addr1.getAddress())).to.equal(a1t2.add(baseValue));
      expect(await token2.balanceOf(acoRewards.address)).to.equal(0);

      let bal = await ACOEthToken2Call.balanceOf(acoRewards.address);
      await acoRewards.setCurrentReward(ACOEthToken2Put.address, 100000);
      await acoRewards.withdrawStuckToken(ACOEthToken2Call.address, bal.div(10), await addr3.getAddress());
      expect(await ACOEthToken2Call.balanceOf(await addr3.getAddress())).to.equal(bal.div(10));
      expect(await ACOEthToken2Call.balanceOf(acoRewards.address)).to.equal(bal.mul(9).div(10));

      await acoRewards.connect(addr1).withdraw(0, poolCallBal);
      await acoRewards.connect(addr2).withdraw(1, a2Uni);
      expect(await acoRewards.balanceOf(0, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(0, await addr2.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr1.getAddress())).to.equal(0);
      expect(await acoRewards.balanceOf(1, await addr2.getAddress())).to.equal(0);
      expect(await ACOPoolToken1Token2Call.balanceOf(await addr1.getAddress())).to.equal(poolCallBal);
      expect(await pairToken1Token2.balanceOf(await addr2.getAddress())).to.equal(a2Uni);
      expect(await ACOPoolToken1Token2Call.balanceOf(acoRewards.address)).to.equal(0);
      expect(await pairToken1Token2.balanceOf(acoRewards.address)).to.equal(0);
    });
  });
});